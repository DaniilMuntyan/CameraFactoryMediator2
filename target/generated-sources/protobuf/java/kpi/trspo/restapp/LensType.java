// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entities/cameraParts.proto

package kpi.trspo.restapp;

/**
 * Protobuf enum {@code kpi.trspo.restapp.LensType}
 */
public enum LensType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>WIDE_ANGLE = 0;</code>
   */
  WIDE_ANGLE(0),
  /**
   * <code>ULTRA_WIDE_ANGLE = 1;</code>
   */
  ULTRA_WIDE_ANGLE(1),
  /**
   * <code>LONG_FOCUS = 2;</code>
   */
  LONG_FOCUS(2),
  /**
   * <code>SUPERTELEFOTO = 3;</code>
   */
  SUPERTELEFOTO(3),
  /**
   * <code>ZOOM = 4;</code>
   */
  ZOOM(4),
  /**
   * <code>SUPER_ZOOM = 5;</code>
   */
  SUPER_ZOOM(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>WIDE_ANGLE = 0;</code>
   */
  public static final int WIDE_ANGLE_VALUE = 0;
  /**
   * <code>ULTRA_WIDE_ANGLE = 1;</code>
   */
  public static final int ULTRA_WIDE_ANGLE_VALUE = 1;
  /**
   * <code>LONG_FOCUS = 2;</code>
   */
  public static final int LONG_FOCUS_VALUE = 2;
  /**
   * <code>SUPERTELEFOTO = 3;</code>
   */
  public static final int SUPERTELEFOTO_VALUE = 3;
  /**
   * <code>ZOOM = 4;</code>
   */
  public static final int ZOOM_VALUE = 4;
  /**
   * <code>SUPER_ZOOM = 5;</code>
   */
  public static final int SUPER_ZOOM_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static LensType valueOf(int value) {
    return forNumber(value);
  }

  public static LensType forNumber(int value) {
    switch (value) {
      case 0: return WIDE_ANGLE;
      case 1: return ULTRA_WIDE_ANGLE;
      case 2: return LONG_FOCUS;
      case 3: return SUPERTELEFOTO;
      case 4: return ZOOM;
      case 5: return SUPER_ZOOM;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<LensType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      LensType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<LensType>() {
          public LensType findValueByNumber(int number) {
            return LensType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return kpi.trspo.restapp.CameraParts.getDescriptor().getEnumTypes().get(0);
  }

  private static final LensType[] VALUES = values();

  public static LensType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private LensType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:kpi.trspo.restapp.LensType)
}

